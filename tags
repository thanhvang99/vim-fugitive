!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_OUTPUT_FILESEP	slash	/slash or backslash/
!_TAG_OUTPUT_MODE	u-ctags	/u-ctags or e-ctags/
!_TAG_PATTERN_LENGTH_LIMIT	96	/0 for no limit/
!_TAG_PROGRAM_AUTHOR	Universal Ctags Team	//
!_TAG_PROGRAM_NAME	Universal Ctags	/Derived from Exuberant Ctags/
!_TAG_PROGRAM_URL	https://ctags.io/	/official site/
!_TAG_PROGRAM_VERSION	0.0.0	/3671ad7/
<C-N>	autoload/fugitive.vim	/^        nnoremap <buffer> <silent> <C-N> :<C-U>execute <SID>NextItem(v:count1)<CR>$/;"	m
<C-P>	autoload/fugitive.vim	/^          nnoremap <buffer> <silent> <C-P> :<C-U>execute <SID>PreviousItem(v:count1)<CR>$/;"	m
<C-P>	autoload/fugitive.vim	/^          nnoremap <buffer> <silent> <C-P> :<C-U>execute line('.') == 1 ? 'CtrlP ' . fnameescape/;"	m
<SID>:	autoload/fugitive.vim	/^nnoremap <SID>: :<C-U><C-R>=v:count ? v:count : ''<CR>$/;"	m
FAQ	README.markdown	/^## FAQ$/;"	s	chapter:fugitive.vim
FugitiveCommonDir	plugin/fugitive.vim	/^function! FugitiveCommonDir(...) abort$/;"	f
FugitiveConfig	plugin/fugitive.vim	/^function! FugitiveConfig(...) abort$/;"	f
FugitiveConfigGet	plugin/fugitive.vim	/^function! FugitiveConfigGet(name, ...) abort$/;"	f
FugitiveConfigGetAll	plugin/fugitive.vim	/^function! FugitiveConfigGetAll(name, ...) abort$/;"	f
FugitiveDetect	plugin/fugitive.vim	/^function! FugitiveDetect(path) abort$/;"	f
FugitiveExtractGitDir	plugin/fugitive.vim	/^function! FugitiveExtractGitDir(path) abort$/;"	f
FugitiveFind	plugin/fugitive.vim	/^function! FugitiveFind(...) abort$/;"	f
FugitiveGitDir	plugin/fugitive.vim	/^function! FugitiveGitDir(...) abort$/;"	f
FugitiveGitPath	plugin/fugitive.vim	/^function! FugitiveGitPath(path) abort$/;"	f
FugitiveHead	plugin/fugitive.vim	/^function! FugitiveHead(...) abort$/;"	f
FugitiveIsGitDir	plugin/fugitive.vim	/^function! FugitiveIsGitDir(path) abort$/;"	f
FugitiveParse	plugin/fugitive.vim	/^function! FugitiveParse(...) abort$/;"	f
FugitivePath	plugin/fugitive.vim	/^function! FugitivePath(...) abort$/;"	f
FugitivePrepare	plugin/fugitive.vim	/^function! FugitivePrepare(...) abort$/;"	f
FugitiveReal	plugin/fugitive.vim	/^function! FugitiveReal(...) abort$/;"	f
FugitiveRemoteUrl	plugin/fugitive.vim	/^function! FugitiveRemoteUrl(...) abort$/;"	f
FugitiveStatusline	plugin/fugitive.vim	/^function! FugitiveStatusline(...) abort$/;"	f
FugitiveVimPath	plugin/fugitive.vim	/^function! FugitiveVimPath(path) abort$/;"	f
FugitiveWorkTree	plugin/fugitive.vim	/^function! FugitiveWorkTree(...) abort$/;"	f
G	plugin/fugitive.vim	/^command! -bang -nargs=? -range=-1 -complete=customlist,fugitive#Complete G   exe fugitive#Comman/;"	c
Git	plugin/fugitive.vim	/^command! -bang -nargs=? -range=-1 -complete=customlist,fugitive#Complete Git exe fugitive#Comman/;"	c
Installation	README.markdown	/^## Installation$/;"	s	chapter:fugitive.vim
License	README.markdown	/^## License$/;"	s	chapter:fugitive.vim
Screencasts	README.markdown	/^## Screencasts$/;"	s	chapter:fugitive.vim
Self-Promotion	README.markdown	/^## Self-Promotion$/;"	s	chapter:fugitive.vim
b:current_syntax	syntax/fugitive.vim	/^let b:current_syntax = "fugitive"$/;"	v
b:current_syntax	syntax/fugitiveblame.vim	/^let b:current_syntax = "fugitiveblame"$/;"	v
fugitive	plugin/fugitive.vim	/^augroup fugitive$/;"	a
fugitive#BlameComplete	autoload/fugitive.vim	/^function! fugitive#BlameComplete(A, L, P) abort$/;"	f
fugitive#BlameSyntax	autoload/fugitive.vim	/^function! fugitive#BlameSyntax() abort$/;"	f
fugitive#BrowseCommand	autoload/fugitive.vim	/^function! fugitive#BrowseCommand(line1, count, range, bang, mods, arg, args) abort$/;"	f
fugitive#BufReadCmd	autoload/fugitive.vim	/^function! fugitive#BufReadCmd(...) abort$/;"	f
fugitive#BufReadStatus	autoload/fugitive.vim	/^function! fugitive#BufReadStatus() abort$/;"	f
fugitive#BufWriteCmd	autoload/fugitive.vim	/^function! fugitive#BufWriteCmd(...) abort$/;"	f
fugitive#CanDiffoff	autoload/fugitive.vim	/^function! fugitive#CanDiffoff(buf) abort$/;"	f
fugitive#Cd	autoload/fugitive.vim	/^function! fugitive#Cd(path, ...) abort$/;"	f
fugitive#CdComplete	autoload/fugitive.vim	/^function! fugitive#CdComplete(A, L, P) abort$/;"	f
fugitive#Cfile	autoload/fugitive.vim	/^function! fugitive#Cfile() abort$/;"	f
fugitive#Command	autoload/fugitive.vim	/^function! fugitive#Command(line1, line2, range, bang, mods, arg) abort$/;"	f
fugitive#CommitComplete	autoload/fugitive.vim	/^function! fugitive#CommitComplete(A, L, P, ...) abort$/;"	f
fugitive#CommonDir	autoload/fugitive.vim	/^function! fugitive#CommonDir(dir) abort$/;"	f
fugitive#Complete	autoload/fugitive.vim	/^function! fugitive#Complete(lead, ...) abort$/;"	f
fugitive#CompleteForWorkingDir	autoload/fugitive.vim	/^function! fugitive#CompleteForWorkingDir(A, L, P, ...) abort$/;"	f
fugitive#CompleteObject	autoload/fugitive.vim	/^function! fugitive#CompleteObject(base, ...) abort$/;"	f
fugitive#CompletePath	autoload/fugitive.vim	/^function! fugitive#CompletePath(base, ...) abort$/;"	f
fugitive#Config	autoload/fugitive.vim	/^function! fugitive#Config(...) abort$/;"	f
fugitive#Cwindow	autoload/fugitive.vim	/^function! fugitive#Cwindow() abort$/;"	f
fugitive#DeleteCommand	autoload/fugitive.vim	/^function! fugitive#DeleteCommand(line1, line2, range, bang, mods, arg, args) abort$/;"	f
fugitive#Diffsplit	autoload/fugitive.vim	/^function! fugitive#Diffsplit(autodir, keepfocus, mods, arg, args) abort$/;"	f
fugitive#EditComplete	autoload/fugitive.vim	/^function! fugitive#EditComplete(A, L, P) abort$/;"	f
fugitive#EfmDir	autoload/fugitive.vim	/^function! fugitive#EfmDir(...) abort$/;"	f
fugitive#Expand	autoload/fugitive.vim	/^function! fugitive#Expand(object) abort$/;"	f
fugitive#FetchComplete	autoload/fugitive.vim	/^function! fugitive#FetchComplete(A, L, P, ...) abort$/;"	f
fugitive#FileReadCmd	autoload/fugitive.vim	/^function! fugitive#FileReadCmd(...) abort$/;"	f
fugitive#FileWriteCmd	autoload/fugitive.vim	/^function! fugitive#FileWriteCmd(...) abort$/;"	f
fugitive#Find	autoload/fugitive.vim	/^function! fugitive#Find(object, ...) abort$/;"	f
fugitive#Foldtext	autoload/fugitive.vim	/^function! fugitive#Foldtext() abort$/;"	f
fugitive#GitVersion	autoload/fugitive.vim	/^function! fugitive#GitVersion(...) abort$/;"	f
fugitive#GrepCommand	autoload/fugitive.vim	/^function! fugitive#GrepCommand(line1, line2, range, bang, mods, arg) abort$/;"	f
fugitive#GrepComplete	autoload/fugitive.vim	/^function! fugitive#GrepComplete(A, L, P) abort$/;"	f
fugitive#Head	autoload/fugitive.vim	/^function! fugitive#Head(...) abort$/;"	f
fugitive#Init	autoload/fugitive.vim	/^function! fugitive#Init() abort$/;"	f
fugitive#LogCommand	autoload/fugitive.vim	/^function! fugitive#LogCommand(line1, count, range, bang, mods, args, type) abort$/;"	f
fugitive#LogComplete	autoload/fugitive.vim	/^function! fugitive#LogComplete(A, L, P) abort$/;"	f
fugitive#MapCfile	autoload/fugitive.vim	/^function! fugitive#MapCfile(...) abort$/;"	f
fugitive#MapJumps	autoload/fugitive.vim	/^function! fugitive#MapJumps(...) abort$/;"	f
fugitive#MergeComplete	autoload/fugitive.vim	/^function! fugitive#MergeComplete(A, L, P, ...) abort$/;"	f
fugitive#MessageCfile	autoload/fugitive.vim	/^function! fugitive#MessageCfile() abort$/;"	f
fugitive#MoveCommand	autoload/fugitive.vim	/^function! fugitive#MoveCommand(line1, line2, range, bang, mods, arg, args) abort$/;"	f
fugitive#Object	autoload/fugitive.vim	/^function! fugitive#Object(...) abort$/;"	f
fugitive#Open	autoload/fugitive.vim	/^function! fugitive#Open(cmd, bang, mods, arg, args) abort$/;"	f
fugitive#PagerFor	autoload/fugitive.vim	/^function! fugitive#PagerFor(argv, ...) abort$/;"	f
fugitive#Path	autoload/fugitive.vim	/^function! fugitive#Path(url, ...) abort$/;"	f
fugitive#PathComplete	autoload/fugitive.vim	/^function! fugitive#PathComplete(...) abort$/;"	f
fugitive#Prepare	autoload/fugitive.vim	/^function! fugitive#Prepare(...) abort$/;"	f
fugitive#PrepareDirEnvArgv	autoload/fugitive.vim	/^function! fugitive#PrepareDirEnvArgv(...) abort$/;"	f
fugitive#PullComplete	autoload/fugitive.vim	/^function! fugitive#PullComplete(A, L, P, ...) abort$/;"	f
fugitive#PushComplete	autoload/fugitive.vim	/^function! fugitive#PushComplete(A, L, P, ...) abort$/;"	f
fugitive#ReadCommand	autoload/fugitive.vim	/^function! fugitive#ReadCommand(line1, count, range, bang, mods, arg, args) abort$/;"	f
fugitive#ReadComplete	autoload/fugitive.vim	/^function! fugitive#ReadComplete(A, L, P) abort$/;"	f
fugitive#Real	autoload/fugitive.vim	/^function! fugitive#Real(url) abort$/;"	f
fugitive#RebaseComplete	autoload/fugitive.vim	/^function! fugitive#RebaseComplete(A, L, P, ...) abort$/;"	f
fugitive#ReloadStatus	autoload/fugitive.vim	/^function! fugitive#ReloadStatus(...) abort$/;"	f
fugitive#RemoteUrl	autoload/fugitive.vim	/^function! fugitive#RemoteUrl(...) abort$/;"	f
fugitive#RemoveCommand	autoload/fugitive.vim	/^function! fugitive#RemoveCommand(line1, line2, range, bang, mods, arg, args) abort$/;"	f
fugitive#RenameCommand	autoload/fugitive.vim	/^function! fugitive#RenameCommand(line1, line2, range, bang, mods, arg, args) abort$/;"	f
fugitive#RenameComplete	autoload/fugitive.vim	/^function! fugitive#RenameComplete(A,L,P) abort$/;"	f
fugitive#Resume	autoload/fugitive.vim	/^function! fugitive#Resume() abort$/;"	f
fugitive#RevParse	autoload/fugitive.vim	/^function! fugitive#RevParse(rev, ...) abort$/;"	f
fugitive#RevertComplete	autoload/fugitive.vim	/^function! fugitive#RevertComplete(A, L, P, ...) abort$/;"	f
fugitive#SourceCmd	autoload/fugitive.vim	/^function! fugitive#SourceCmd(...) abort$/;"	f
fugitive#StatusCfile	autoload/fugitive.vim	/^function! fugitive#StatusCfile() abort$/;"	f
fugitive#Statusline	autoload/fugitive.vim	/^function! fugitive#Statusline(...) abort$/;"	f
fugitive#WqCommand	autoload/fugitive.vim	/^function! fugitive#WqCommand(...) abort$/;"	f
fugitive#WriteCommand	autoload/fugitive.vim	/^function! fugitive#WriteCommand(line1, line2, range, bang, mods, arg, args) abort$/;"	f
fugitive#buffer	autoload/fugitive.vim	/^function! fugitive#buffer(...) abort$/;"	f
fugitive#delete	autoload/fugitive.vim	/^function! fugitive#delete(url, ...) abort$/;"	f
fugitive#detect	autoload/fugitive.vim	/^function! fugitive#detect(path) abort$/;"	f
fugitive#extract_git_dir	autoload/fugitive.vim	/^function! fugitive#extract_git_dir(path) abort$/;"	f
fugitive#filereadable	autoload/fugitive.vim	/^function! fugitive#filereadable(url) abort$/;"	f
fugitive#filewritable	autoload/fugitive.vim	/^function! fugitive#filewritable(url) abort$/;"	f
fugitive#foldtext	autoload/fugitive.vim	/^function! fugitive#foldtext() abort$/;"	f
fugitive#getfperm	autoload/fugitive.vim	/^function! fugitive#getfperm(url) abort$/;"	f
fugitive#getfsize	autoload/fugitive.vim	/^function! fugitive#getfsize(url) abort$/;"	f
fugitive#getftime	autoload/fugitive.vim	/^function! fugitive#getftime(url) abort$/;"	f
fugitive#getftype	autoload/fugitive.vim	/^function! fugitive#getftype(url) abort$/;"	f
fugitive#glob	autoload/fugitive.vim	/^function! fugitive#glob(url, ...) abort$/;"	f
fugitive#head	autoload/fugitive.vim	/^function! fugitive#head(...) abort$/;"	f
fugitive#is_git_dir	autoload/fugitive.vim	/^function! fugitive#is_git_dir(path) abort$/;"	f
fugitive#isdirectory	autoload/fugitive.vim	/^function! fugitive#isdirectory(url) abort$/;"	f
fugitive#readfile	autoload/fugitive.vim	/^function! fugitive#readfile(url, ...) abort$/;"	f
fugitive#repo	autoload/fugitive.vim	/^function! fugitive#repo(...) abort$/;"	f
fugitive#resolve	autoload/fugitive.vim	/^function! fugitive#resolve(url) abort$/;"	f
fugitive#setfperm	autoload/fugitive.vim	/^function! fugitive#setfperm(url, perm) abort$/;"	f
fugitive#simplify	autoload/fugitive.vim	/^function! fugitive#simplify(url) abort$/;"	f
fugitive#statusline	autoload/fugitive.vim	/^function! fugitive#statusline(...) abort$/;"	f
fugitive#writefile	autoload/fugitive.vim	/^function! fugitive#writefile(lines, url, ...) abort$/;"	f
fugitive.vim	README.markdown	/^# fugitive.vim$/;"	c
fugitive_blame	autoload/fugitive.vim	/^augroup fugitive_blame$/;"	a
fugitive_diff	autoload/fugitive.vim	/^augroup fugitive_diff$/;"	a
fugitive_job	autoload/fugitive.vim	/^augroup fugitive_job$/;"	a
fugitive_status	autoload/fugitive.vim	/^augroup fugitive_status$/;"	a
fugitive_temp	autoload/fugitive.vim	/^augroup fugitive_temp$/;"	a
g:_fugitive_last_job	autoload/fugitive.vim	/^    let g:_fugitive_last_job = state$/;"	v
g:autoloaded_fugitive	autoload/fugitive.vim	/^let g:autoloaded_fugitive = 1$/;"	v
g:fugitive_event	autoload/fugitive.vim	/^    let g:fugitive_event = dir$/;"	v
g:fugitive_git_executable	autoload/fugitive.vim	/^  let g:fugitive_git_executable = 'env ' . g:fugitive_git_executable$/;"	v
g:fugitive_git_executable	autoload/fugitive.vim	/^  let g:fugitive_git_executable = 'git'$/;"	v
g:fugitive_summary_format	autoload/fugitive.vim	/^  let g:fugitive_summary_format = '%s'$/;"	v
g:io_fugitive	plugin/fugitive.vim	/^let g:io_fugitive = {$/;"	v
g:loaded_fugitive	plugin/fugitive.vim	/^let g:loaded_fugitive = 1$/;"	v
g:virtual_scriptnames	autoload/fugitive.vim	/^    let g:virtual_scriptnames = {}$/;"	v
g:virtual_scriptnames	autoload/fugitive.vim	/^  let g:virtual_scriptnames[temp] = amatch$/;"	v
q	autoload/fugitive.vim	/^      nnoremap <buffer> <silent> q    :<C-U>bdelete<Bar>echohl WarningMsg<Bar>echo "Temp file q /;"	m
q	autoload/fugitive.vim	/^      nnoremap <buffer> <silent> q :<C-U>if bufnr('$') == 1<Bar>quit<Bar>else<Bar>bdelete<Bar>en/;"	m
s:AddHeader	autoload/fugitive.vim	/^function! s:AddHeader(key, value) abort$/;"	f
s:AddSection	autoload/fugitive.vim	/^function! s:AddSection(label, lines, ...) abort$/;"	f
s:Aliases	autoload/fugitive.vim	/^function! s:Aliases(dir) abort$/;"	f
s:AskPassArgs	autoload/fugitive.vim	/^function! s:AskPassArgs(dir) abort$/;"	f
s:BlameBufnr	autoload/fugitive.vim	/^function! s:BlameBufnr(...) abort$/;"	f
s:BlameCommit	autoload/fugitive.vim	/^function! s:BlameCommit(cmd, ...) abort$/;"	f
s:BlameCommitFileLnum	autoload/fugitive.vim	/^function! s:BlameCommitFileLnum(...) abort$/;"	f
s:BlameFileType	autoload/fugitive.vim	/^function! s:BlameFileType() abort$/;"	f
s:BlameJump	autoload/fugitive.vim	/^function! s:BlameJump(suffix, ...) abort$/;"	f
s:BlameLeave	autoload/fugitive.vim	/^function! s:BlameLeave() abort$/;"	f
s:BlameQuit	autoload/fugitive.vim	/^function! s:BlameQuit() abort$/;"	f
s:BlameRehighlight	autoload/fugitive.vim	/^function! s:BlameRehighlight() abort$/;"	f
s:BlameSubcommand	autoload/fugitive.vim	/^function! s:BlameSubcommand(line1, count, range, bang, mods, options) abort$/;"	f
s:BlobTemp	autoload/fugitive.vim	/^function! s:BlobTemp(url) abort$/;"	f
s:BlurStatus	autoload/fugitive.vim	/^function! s:BlurStatus() abort$/;"	f
s:BufName	autoload/fugitive.vim	/^function! s:BufName(var) abort$/;"	f
s:BuildEnvPrefix	autoload/fugitive.vim	/^function! s:BuildEnvPrefix(env) abort$/;"	f
s:BuildShell	autoload/fugitive.vim	/^function! s:BuildShell(dir, env, args) abort$/;"	f
s:CeilingDirectories	plugin/fugitive.vim	/^function! s:CeilingDirectories() abort$/;"	f
s:ChompDefault	autoload/fugitive.vim	/^function! s:ChompDefault(default, ...) abort$/;"	f
s:ChompError	autoload/fugitive.vim	/^function! s:ChompError(...) abort$/;"	f
s:CommitInteractive	autoload/fugitive.vim	/^function! s:CommitInteractive(line1, line2, range, bang, mods, options, patch) abort$/;"	f
s:CommitSubcommand	autoload/fugitive.vim	/^function! s:CommitSubcommand(line1, line2, range, bang, mods, options) abort$/;"	f
s:CompareAge	autoload/fugitive.vim	/^function! s:CompareAge(mine, theirs) abort$/;"	f
s:CompleteHeads	autoload/fugitive.vim	/^function! s:CompleteHeads(dir) abort$/;"	f
s:CompleteRemote	autoload/fugitive.vim	/^function! s:CompleteRemote(A, L, P, ...) abort$/;"	f
s:CompleteRevision	autoload/fugitive.vim	/^function! s:CompleteRevision(A, L, P, ...) abort$/;"	f
s:CompleteSub	autoload/fugitive.vim	/^function! s:CompleteSub(subcommand, A, L, P, ...) abort$/;"	f
s:ConfigTimestamps	autoload/fugitive.vim	/^function! s:ConfigTimestamps(dir, dict) abort$/;"	f
s:ContainingCommit	autoload/fugitive.vim	/^function! s:ContainingCommit() abort$/;"	f
s:DiffClose	autoload/fugitive.vim	/^function! s:DiffClose() abort$/;"	f
s:DifftoolSubcommand	autoload/fugitive.vim	/^function! s:DifftoolSubcommand(line1, line2, range, bang, mods, options) abort$/;"	f
s:Dir	autoload/fugitive.vim	/^function! s:Dir(...) abort$/;"	f
s:DirCheck	autoload/fugitive.vim	/^function! s:DirCheck(...) abort$/;"	f
s:DirCommitFile	autoload/fugitive.vim	/^function! s:DirCommitFile(path) abort$/;"	f
s:DirRev	autoload/fugitive.vim	/^function! s:DirRev(url) abort$/;"	f
s:Dispatch	autoload/fugitive.vim	/^function! s:Dispatch(bang, options) abort$/;"	f
s:Do	autoload/fugitive.vim	/^function! s:Do(action, visual) abort$/;"	f
s:DoAutocmd	autoload/fugitive.vim	/^function! s:DoAutocmd(cmd) abort$/;"	f
s:DoAutocmdChanged	autoload/fugitive.vim	/^function! s:DoAutocmdChanged(dir) abort$/;"	f
s:DoStagePushHeader	autoload/fugitive.vim	/^function! s:DoStagePushHeader(value) abort$/;"	f
s:DoStageUnpushed	autoload/fugitive.vim	/^function! s:DoStageUnpushed(record) abort$/;"	f
s:DoStageUnpushedHeading	autoload/fugitive.vim	/^function! s:DoStageUnpushedHeading(heading) abort$/;"	f
s:DoStageUnstaged	autoload/fugitive.vim	/^function! s:DoStageUnstaged(record) abort$/;"	f
s:DoStageUnstagedHeading	autoload/fugitive.vim	/^function! s:DoStageUnstagedHeading(heading) abort$/;"	f
s:DoStageUntracked	autoload/fugitive.vim	/^function! s:DoStageUntracked(record) abort$/;"	f
s:DoStageUntrackedHeading	autoload/fugitive.vim	/^function! s:DoStageUntrackedHeading(heading) abort$/;"	f
s:DoToggleHeadHeader	autoload/fugitive.vim	/^function! s:DoToggleHeadHeader(value) abort$/;"	f
s:DoToggleHelpHeader	autoload/fugitive.vim	/^function! s:DoToggleHelpHeader(value) abort$/;"	f
s:DoTogglePushHeader	autoload/fugitive.vim	/^function! s:DoTogglePushHeader(value) abort$/;"	f
s:DoToggleStaged	autoload/fugitive.vim	/^function! s:DoToggleStaged(record) abort$/;"	f
s:DoToggleStagedHeading	autoload/fugitive.vim	/^function! s:DoToggleStagedHeading(...) abort$/;"	f
s:DoToggleUnpulled	autoload/fugitive.vim	/^function! s:DoToggleUnpulled(record) abort$/;"	f
s:DoToggleUnpulledHeading	autoload/fugitive.vim	/^function! s:DoToggleUnpulledHeading(heading) abort$/;"	f
s:DoToggleUnpushed	autoload/fugitive.vim	/^function! s:DoToggleUnpushed(record) abort$/;"	f
s:DoToggleUnpushedHeading	autoload/fugitive.vim	/^function! s:DoToggleUnpushedHeading(heading) abort$/;"	f
s:DoToggleUnstaged	autoload/fugitive.vim	/^function! s:DoToggleUnstaged(record) abort$/;"	f
s:DoToggleUnstagedHeading	autoload/fugitive.vim	/^function! s:DoToggleUnstagedHeading(...) abort$/;"	f
s:DoToggleUntracked	autoload/fugitive.vim	/^function! s:DoToggleUntracked(record) abort$/;"	f
s:DoToggleUntrackedHeading	autoload/fugitive.vim	/^function! s:DoToggleUntrackedHeading(...) abort$/;"	f
s:DoUnstageStaged	autoload/fugitive.vim	/^function! s:DoUnstageStaged(record) abort$/;"	f
s:DoUnstageStagedHeading	autoload/fugitive.vim	/^function! s:DoUnstageStagedHeading(heading) abort$/;"	f
s:DoUnstageUnpulled	autoload/fugitive.vim	/^function! s:DoUnstageUnpulled(record) abort$/;"	f
s:DoUnstageUnpulledHeading	autoload/fugitive.vim	/^function! s:DoUnstageUnpulledHeading(heading) abort$/;"	f
s:DoUnstageUnpushed	autoload/fugitive.vim	/^function! s:DoUnstageUnpushed(record) abort$/;"	f
s:DoUnstageUnstaged	autoload/fugitive.vim	/^function! s:DoUnstageUnstaged(record) abort$/;"	f
s:DotRelative	autoload/fugitive.vim	/^function! s:DotRelative(path, ...) abort$/;"	f
s:EchoExec	autoload/fugitive.vim	/^function! s:EchoExec(...) abort$/;"	f
s:ExecPath	autoload/fugitive.vim	/^function! s:ExecPath() abort$/;"	f
s:Expand	autoload/fugitive.vim	/^function! s:Expand(rev, ...) abort$/;"	f
s:ExpandSplit	autoload/fugitive.vim	/^function! s:ExpandSplit(string, ...) abort$/;"	f
s:ExpandVar	autoload/fugitive.vim	/^function! s:ExpandVar(other, var, flags, esc, ...) abort$/;"	f
s:ExpandVarLegacy	autoload/fugitive.vim	/^function! s:ExpandVarLegacy(str) abort$/;"	f
s:ExpireStatus	autoload/fugitive.vim	/^function! s:ExpireStatus(bufnr) abort$/;"	f
s:FetchSubcommand	autoload/fugitive.vim	/^function! s:FetchSubcommand(line1, line2, range, bang, mods, options) abort$/;"	f
s:FileIgnoreCase	autoload/fugitive.vim	/^function! s:FileIgnoreCase(for_completion) abort$/;"	f
s:FilterEscape	autoload/fugitive.vim	/^function! s:FilterEscape(items, ...) abort$/;"	f
s:Format	autoload/fugitive.vim	/^function! s:Format(val) abort$/;"	f
s:FormatFile	autoload/fugitive.vim	/^function! s:FormatFile(dict) abort$/;"	f
s:FormatLog	autoload/fugitive.vim	/^function! s:FormatLog(dict) abort$/;"	f
s:FormatRebase	autoload/fugitive.vim	/^function! s:FormatRebase(dict) abort$/;"	f
s:GF	autoload/fugitive.vim	/^function! s:GF(mode) abort$/;"	f
s:Generate	autoload/fugitive.vim	/^function! s:Generate(rev, ...) abort$/;"	f
s:GlobComplete	autoload/fugitive.vim	/^function! s:GlobComplete(lead, pattern) abort$/;"	f
s:GrepParseLine	autoload/fugitive.vim	/^function! s:GrepParseLine(prefix, name_only, dir, line) abort$/;"	f
s:GrepSubcommand	autoload/fugitive.vim	/^function! s:GrepSubcommand(line1, line2, range, bang, mods, options) abort$/;"	f
s:HasOpt	autoload/fugitive.vim	/^function! s:HasOpt(args, ...) abort$/;"	f
s:IsConflicted	autoload/fugitive.vim	/^function! s:IsConflicted() abort$/;"	f
s:JobOpts	autoload/fugitive.vim	/^function! s:JobOpts(cmd, env) abort$/;"	f
s:Keywordprg	autoload/fugitive.vim	/^function! s:Keywordprg() abort$/;"	f
s:LinesError	autoload/fugitive.vim	/^function! s:LinesError(...) abort$/;"	f
s:LogFlushQueue	autoload/fugitive.vim	/^function! s:LogFlushQueue(state, dir) abort$/;"	f
s:LogParse	autoload/fugitive.vim	/^function! s:LogParse(state, dir, line) abort$/;"	f
s:Map	autoload/fugitive.vim	/^function! s:Map(mode, lhs, rhs, ...) abort$/;"	f
s:Map	plugin/fugitive.vim	/^function! s:Map(mode, lhs, rhs, ...) abort$/;"	f
s:MapMotion	autoload/fugitive.vim	/^function! s:MapMotion(lhs, rhs) abort$/;"	f
s:MergeHead	autoload/fugitive.vim	/^function! s:MergeHead(...) abort$/;"	f
s:MergeSubcommand	autoload/fugitive.vim	/^function! s:MergeSubcommand(line1, line2, range, bang, mods, options) abort$/;"	f
s:MergetoolSubcommand	autoload/fugitive.vim	/^function! s:MergetoolSubcommand(line1, line2, range, bang, mods, options) abort$/;"	f
s:MessageCfile	autoload/fugitive.vim	/^function! s:MessageCfile(...) abort$/;"	f
s:Mods	autoload/fugitive.vim	/^function! s:Mods(mods, ...) abort$/;"	f
s:Move	autoload/fugitive.vim	/^function! s:Move(force, rename, destination) abort$/;"	f
s:NavigateUp	autoload/fugitive.vim	/^function! s:NavigateUp(count) abort$/;"	f
s:NextExpandedHunk	autoload/fugitive.vim	/^function! s:NextExpandedHunk(count) abort$/;"	f
s:NextFile	autoload/fugitive.vim	/^function! s:NextFile(count) abort$/;"	f
s:NextHunk	autoload/fugitive.vim	/^function! s:NextHunk(count) abort$/;"	f
s:NextItem	autoload/fugitive.vim	/^function! s:NextItem(count) abort$/;"	f
s:NextSection	autoload/fugitive.vim	/^function! s:NextSection(count) abort$/;"	f
s:NextSectionEnd	autoload/fugitive.vim	/^function! s:NextSectionEnd(count) abort$/;"	f
s:NullError	autoload/fugitive.vim	/^function! s:NullError(...) abort$/;"	f
s:OpenExec	autoload/fugitive.vim	/^function! s:OpenExec(cmd, mods, env, args, ...) abort$/;"	f
s:OpenParse	autoload/fugitive.vim	/^function! s:OpenParse(args, wants_cmd) abort$/;"	f
s:Owner	autoload/fugitive.vim	/^function! s:Owner(path, ...) abort$/;"	f
s:PatchSearchExpr	autoload/fugitive.vim	/^function! s:PatchSearchExpr(reverse) abort$/;"	f
s:PathInfo	autoload/fugitive.vim	/^function! s:PathInfo(url) abort$/;"	f
s:PreparePathArgs	autoload/fugitive.vim	/^function! s:PreparePathArgs(cmd, dir, literal) abort$/;"	f
s:PreviousFile	autoload/fugitive.vim	/^function! s:PreviousFile(count) abort$/;"	f
s:PreviousHunk	autoload/fugitive.vim	/^function! s:PreviousHunk(count) abort$/;"	f
s:PreviousItem	autoload/fugitive.vim	/^function! s:PreviousItem(count) abort$/;"	f
s:PreviousSection	autoload/fugitive.vim	/^function! s:PreviousSection(count) abort$/;"	f
s:PreviousSectionEnd	autoload/fugitive.vim	/^function! s:PreviousSectionEnd(count) abort$/;"	f
s:ProjectionistDetect	plugin/fugitive.vim	/^function! s:ProjectionistDetect() abort$/;"	f
s:PushSubcommand	autoload/fugitive.vim	/^function! s:PushSubcommand(line1, line2, range, bang, mods, options) abort$/;"	f
s:QueryLog	autoload/fugitive.vim	/^function! s:QueryLog(refspec) abort$/;"	f
s:QuickfixCreate	autoload/fugitive.vim	/^function! s:QuickfixCreate(nr, opts) abort$/;"	f
s:QuickfixGet	autoload/fugitive.vim	/^function! s:QuickfixGet(nr, ...) abort$/;"	f
s:QuickfixSet	autoload/fugitive.vim	/^function! s:QuickfixSet(nr, ...) abort$/;"	f
s:QuickfixStream	autoload/fugitive.vim	/^function! s:QuickfixStream(nr, event, title, cmd, first, callback, ...) abort$/;"	f
s:ReadExec	autoload/fugitive.vim	/^function! s:ReadExec(line1, count, range, mods, env, args, options) abort$/;"	f
s:ReadPrepare	autoload/fugitive.vim	/^function! s:ReadPrepare(line1, count, range, mods) abort$/;"	f
s:RebaseArgument	autoload/fugitive.vim	/^function! s:RebaseArgument() abort$/;"	f
s:RebaseSubcommand	autoload/fugitive.vim	/^function! s:RebaseSubcommand(line1, line2, range, bang, mods, options) abort$/;"	f
s:Relative	autoload/fugitive.vim	/^function! s:Relative(...) abort$/;"	f
s:ReloadStatus	autoload/fugitive.vim	/^function! s:ReloadStatus(...) abort$/;"	f
s:ReloadStatusBuffer	autoload/fugitive.vim	/^function! s:ReloadStatusBuffer(...) abort$/;"	f
s:ReloadTabStatus	autoload/fugitive.vim	/^function! s:ReloadTabStatus(...) abort$/;"	f
s:ReloadWinStatus	autoload/fugitive.vim	/^function! s:ReloadWinStatus(...) abort$/;"	f
s:Remote	autoload/fugitive.vim	/^function! s:Remote(dir) abort$/;"	f
s:Remove	autoload/fugitive.vim	/^function! s:Remove(after, force) abort$/;"	f
s:ReplaceCmd	autoload/fugitive.vim	/^function! s:ReplaceCmd(cmd) abort$/;"	f
s:Resolve	autoload/fugitive.vim	/^function! s:Resolve(path) abort$/;"	f
s:RevertSubcommand	autoload/fugitive.vim	/^function! s:RevertSubcommand(line1, line2, range, bang, mods, options) abort$/;"	f
s:RunBufDelete	autoload/fugitive.vim	/^function! s:RunBufDelete(bufnr) abort$/;"	f
s:RunEdit	autoload/fugitive.vim	/^function! s:RunEdit(state, job) abort$/;"	f
s:RunJobs	autoload/fugitive.vim	/^function! s:RunJobs() abort$/;"	f
s:RunReceive	autoload/fugitive.vim	/^function! s:RunReceive(state, job, data, ...) abort$/;"	f
s:RunSend	autoload/fugitive.vim	/^function! s:RunSend(job, str) abort$/;"	f
s:RunWait	autoload/fugitive.vim	/^function! s:RunWait(state, job) abort$/;"	f
s:Selection	autoload/fugitive.vim	/^function! s:Selection(arg1, ...) abort$/;"	f
s:Slash	autoload/fugitive.vim	/^function! s:Slash(path) abort$/;"	f
s:Slash	plugin/fugitive.vim	/^function! s:Slash(path) abort$/;"	f
s:SplitExpand	autoload/fugitive.vim	/^function! s:SplitExpand(string, ...) abort$/;"	f
s:SplitExpandChain	autoload/fugitive.vim	/^function! s:SplitExpandChain(string, ...) abort$/;"	f
s:SquashArgument	autoload/fugitive.vim	/^function! s:SquashArgument(...) abort$/;"	f
s:StageApply	autoload/fugitive.vim	/^function! s:StageApply(info, reverse, extra) abort$/;"	f
s:StageArgs	autoload/fugitive.vim	/^function! s:StageArgs(visual) abort$/;"	f
s:StageDelete	autoload/fugitive.vim	/^function! s:StageDelete(lnum1, lnum2, count) abort$/;"	f
s:StageDiff	autoload/fugitive.vim	/^function! s:StageDiff(diff) abort$/;"	f
s:StageDiffEdit	autoload/fugitive.vim	/^function! s:StageDiffEdit() abort$/;"	f
s:StageIgnore	autoload/fugitive.vim	/^function! s:StageIgnore(lnum1, lnum2, count) abort$/;"	f
s:StageInfo	autoload/fugitive.vim	/^function! s:StageInfo(...) abort$/;"	f
s:StageInline	autoload/fugitive.vim	/^function! s:StageInline(mode, ...) abort$/;"	f
s:StageJump	autoload/fugitive.vim	/^function! s:StageJump(offset, section, ...) abort$/;"	f
s:StagePatch	autoload/fugitive.vim	/^function! s:StagePatch(lnum1,lnum2) abort$/;"	f
s:StageReveal	autoload/fugitive.vim	/^function! s:StageReveal() abort$/;"	f
s:StageSeek	autoload/fugitive.vim	/^function! s:StageSeek(info, fallback) abort$/;"	f
s:StatusCfile	autoload/fugitive.vim	/^function! s:StatusCfile(...) abort$/;"	f
s:StatusCommand	autoload/fugitive.vim	/^function! s:StatusCommand(line1, line2, range, count, bang, mods, reg, arg, args, ...) abort$/;"	f
s:Subcommands	autoload/fugitive.vim	/^function! s:Subcommands() abort$/;"	f
s:SystemError	autoload/fugitive.vim	/^function! s:SystemError(cmd, ...) abort$/;"	f
s:TempCmd	autoload/fugitive.vim	/^function! s:TempCmd(out, cmd) abort$/;"	f
s:TempReadPost	autoload/fugitive.vim	/^function! s:TempReadPost(file) abort$/;"	f
s:TempReadPre	autoload/fugitive.vim	/^function! s:TempReadPre(file) abort$/;"	f
s:TempScript	autoload/fugitive.vim	/^function! s:TempScript(...) abort$/;"	f
s:TempState	autoload/fugitive.vim	/^function! s:TempState(...) abort$/;"	f
s:ToolItems	autoload/fugitive.vim	/^function! s:ToolItems(state, from, to, offsets, text, ...) abort$/;"	f
s:ToolParse	autoload/fugitive.vim	/^function! s:ToolParse(state, line) abort$/;"	f
s:ToolStream	autoload/fugitive.vim	/^function! s:ToolStream(line1, line2, range, bang, mods, options, args, state) abort$/;"	f
s:ToolToFrom	autoload/fugitive.vim	/^function! s:ToolToFrom(str) abort$/;"	f
s:Tree	autoload/fugitive.vim	/^function! s:Tree(...) abort$/;"	f
s:Tree	plugin/fugitive.vim	/^function! s:Tree(path) abort$/;"	f
s:TreeChomp	autoload/fugitive.vim	/^function! s:TreeChomp(...) abort$/;"	f
s:TreeInfo	autoload/fugitive.vim	/^function! s:TreeInfo(dir, commit) abort$/;"	f
s:Uniq	autoload/fugitive.vim	/^function! s:Uniq(list) abort$/;"	f
s:UpdateIndex	autoload/fugitive.vim	/^function s:UpdateIndex(dir, info) abort$/;"	f
s:UsableWin	autoload/fugitive.vim	/^function! s:UsableWin(nr) abort$/;"	f
s:UserCommand	autoload/fugitive.vim	/^function! s:UserCommand(...) abort$/;"	f
s:UserCommandList	autoload/fugitive.vim	/^function! s:UserCommandList(...) abort$/;"	f
s:WinShellEsc	autoload/fugitive.vim	/^function! s:WinShellEsc(arg) abort$/;"	f
s:add_methods	autoload/fugitive.vim	/^function! s:add_methods(namespace, method_names) abort$/;"	f
s:addr_other	plugin/fugitive.vim	/^let s:addr_other = has('patch-8.1.560') ? '-addr=other' : ''$/;"	v
s:addr_tabs	plugin/fugitive.vim	/^let s:addr_tabs  = has('patch-7.4.542') ? '-addr=tabs' : ''$/;"	v
s:addr_wins	plugin/fugitive.vim	/^let s:addr_wins  = has('patch-7.4.542') ? '-addr=windows' : ''$/;"	v
s:aliases	autoload/fugitive.vim	/^let s:aliases = {}$/;"	v
s:blobdirs	autoload/fugitive.vim	/^  let s:blobdirs = {}$/;"	v
s:buffer_prototype	autoload/fugitive.vim	/^let s:buffer_prototype = {}$/;"	v
s:buffer_repo	autoload/fugitive.vim	/^function! s:buffer_repo() dict abort$/;"	f
s:buffer_type	autoload/fugitive.vim	/^function! s:buffer_type(...) dict abort$/;"	f
s:can_diffoff	autoload/fugitive.vim	/^function! s:can_diffoff(buf) abort$/;"	f
s:cfile	autoload/fugitive.vim	/^function! s:cfile() abort$/;"	f
s:common_efm	autoload/fugitive.vim	/^let s:common_efm = ''$/;"	v
s:commondirs	autoload/fugitive.vim	/^let s:commondirs = {}$/;"	v
s:config	autoload/fugitive.vim	/^let s:config = {}$/;"	v
s:cpath	autoload/fugitive.vim	/^function! s:cpath(path, ...) abort$/;"	f
s:diff_modifier	autoload/fugitive.vim	/^function! s:diff_modifier(count) abort$/;"	f
s:diff_restore	autoload/fugitive.vim	/^function! s:diff_restore() abort$/;"	f
s:diff_window_count	autoload/fugitive.vim	/^function! s:diff_window_count() abort$/;"	f
s:diffoff	autoload/fugitive.vim	/^function! s:diffoff() abort$/;"	f
s:diffoff_all	autoload/fugitive.vim	/^function! s:diffoff_all(dir) abort$/;"	f
s:diffthis	autoload/fugitive.vim	/^function! s:diffthis() abort$/;"	f
s:dir_for_worktree	plugin/fugitive.vim	/^let s:dir_for_worktree = {}$/;"	v
s:disable_colors	autoload/fugitive.vim	/^let s:disable_colors = []$/;"	v
s:edit_jobs	autoload/fugitive.vim	/^  let s:edit_jobs = {}$/;"	v
s:exec_paths	autoload/fugitive.vim	/^let s:exec_paths = {}$/;"	v
s:executable	autoload/fugitive.vim	/^function! s:executable(binary) abort$/;"	f
s:executables	autoload/fugitive.vim	/^let s:executables = {}$/;"	v
s:expand	autoload/fugitive.vim	/^let s:expand = '\\%(\\(' . s:var . '\\)\\(' . s:flag . '*\\)\\(:S\\)\\=\\)'$/;"	v
s:file_commit_pattern	autoload/fugitive.vim	/^let s:file_commit_pattern = s:file_pattern . '\\|^\\%(\\l\\{3,\\} \\)\\=[0-9a-f]\\{4,\\} '$/;"	v
s:file_pattern	autoload/fugitive.vim	/^let s:file_pattern = '^[A-Z?] .\\|^diff --'$/;"	v
s:flag	autoload/fugitive.vim	/^let s:flag = '\\%(:[p8~.htre]\\|:g\\=s\\(.\\).\\{-\\}\\1.\\{-\\}\\1\\)'$/;"	v
s:fnameescape	autoload/fugitive.vim	/^function! s:fnameescape(file) abort$/;"	f
s:fnameescape	autoload/fugitive.vim	/^let s:fnameescape = " \\t\\n*?[{`$\\\\%#'\\"|!<"$/;"	v
s:function	autoload/fugitive.vim	/^function! s:function(name) abort$/;"	f
s:git_versions	autoload/fugitive.vim	/^let s:git_versions = {}$/;"	v
s:globsubs	autoload/fugitive.vim	/^let s:globsubs = {$/;"	v
s:gsub	autoload/fugitive.vim	/^function! s:gsub(str,pat,rep) abort$/;"	f
s:hash_colors	autoload/fugitive.vim	/^let s:hash_colors = {}$/;"	v
s:head_cache	autoload/fugitive.vim	/^let s:head_cache = {}$/;"	v
s:indexes	autoload/fugitive.vim	/^let s:indexes = {}$/;"	v
s:item_pattern	autoload/fugitive.vim	/^let s:item_pattern = s:file_commit_pattern . '\\|^@@'$/;"	v
s:last_time	autoload/fugitive.vim	/^let s:last_time = reltime()$/;"	v
s:last_times	autoload/fugitive.vim	/^  let s:last_times = {}$/;"	v
s:linechars	autoload/fugitive.vim	/^function! s:linechars(pattern) abort$/;"	f
s:log_diff_context	autoload/fugitive.vim	/^let s:log_diff_context = '{"filename": fugitive#Find(v:val . from, a:dir), "lnum": get(offsets, /;"	v
s:merge_heads	autoload/fugitive.vim	/^let s:merge_heads = ['MERGE_HEAD', 'REBASE_HEAD', 'CHERRY_PICK_HEAD', 'REVERT_HEAD']$/;"	v
s:nowait	autoload/fugitive.vim	/^let s:nowait = v:version >= 704 ? '<nowait>' : ''$/;"	v
s:nowait	plugin/fugitive.vim	/^let s:nowait = v:version >= 704 ? '<nowait>' : ''$/;"	v
s:prepare_env	autoload/fugitive.vim	/^let s:prepare_env = {$/;"	v
s:rebase_abbrevs	autoload/fugitive.vim	/^let s:rebase_abbrevs = {$/;"	v
s:redirects	autoload/fugitive.vim	/^let s:redirects = {}$/;"	v
s:ref_header	autoload/fugitive.vim	/^let s:ref_header = '\\%(Merge\\|Rebase\\|Upstream\\|Pull\\|Push\\)'$/;"	v
s:repo_bare	autoload/fugitive.vim	/^function! s:repo_bare() dict abort$/;"	f
s:repo_config	autoload/fugitive.vim	/^function! s:repo_config(name) dict abort$/;"	f
s:repo_dir	autoload/fugitive.vim	/^function! s:repo_dir(...) dict abort$/;"	f
s:repo_find	autoload/fugitive.vim	/^function! s:repo_find(object) dict abort$/;"	f
s:repo_git_chomp	autoload/fugitive.vim	/^function! s:repo_git_chomp(...) dict abort$/;"	f
s:repo_git_chomp_in_tree	autoload/fugitive.vim	/^function! s:repo_git_chomp_in_tree(...) dict abort$/;"	f
s:repo_git_command	autoload/fugitive.vim	/^function! s:repo_git_command(...) dict abort$/;"	f
s:repo_head	autoload/fugitive.vim	/^function! s:repo_head(...) dict abort$/;"	f
s:repo_prepare	autoload/fugitive.vim	/^function! s:repo_prepare(...) dict abort$/;"	f
s:repo_prototype	autoload/fugitive.vim	/^let s:repo_prototype = {}$/;"	v
s:repo_rev_parse	autoload/fugitive.vim	/^function! s:repo_rev_parse(rev) dict abort$/;"	f
s:repo_superglob	autoload/fugitive.vim	/^function! s:repo_superglob(base) dict abort$/;"	f
s:repo_translate	autoload/fugitive.vim	/^function! s:repo_translate(rev) dict abort$/;"	f
s:repo_tree	autoload/fugitive.vim	/^function! s:repo_tree(...) dict abort$/;"	f
s:repo_user	autoload/fugitive.vim	/^function! s:repo_user() dict abort$/;"	f
s:repos	autoload/fugitive.vim	/^let s:repos = {}$/;"	v
s:resume_queue	autoload/fugitive.vim	/^  let s:resume_queue = []$/;"	v
s:section_commit_pattern	autoload/fugitive.vim	/^let s:section_commit_pattern = s:section_pattern . '\\|^commit '$/;"	v
s:section_pattern	autoload/fugitive.vim	/^let s:section_pattern = '^[A-Z][a-z][^:]*$'$/;"	v
s:shellesc	autoload/fugitive.vim	/^function! s:shellesc(arg) abort$/;"	f
s:sub	autoload/fugitive.vim	/^function! s:sub(str,pat,rep) abort$/;"	f
s:temp_files	autoload/fugitive.vim	/^  let s:temp_files = {}$/;"	v
s:temp_scripts	autoload/fugitive.vim	/^  let s:temp_scripts = {}$/;"	v
s:throw	autoload/fugitive.vim	/^function! s:throw(string) abort$/;"	f
s:trees	autoload/fugitive.vim	/^let s:trees = {}$/;"	v
s:var	autoload/fugitive.vim	/^let s:var = '\\%(%\\|#<\\=\\d\\+\\|##\\=\\)'$/;"	v
s:winshell	autoload/fugitive.vim	/^function! s:winshell() abort$/;"	f
s:worktree_for_dir	plugin/fugitive.vim	/^let s:worktree_for_dir = {}$/;"	v
